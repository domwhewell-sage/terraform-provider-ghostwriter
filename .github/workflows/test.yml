# This GitHub action runs your tests for each commit push and/or PR. Optionally
# you can turn it on using a cron schedule for regular testing.
#
name: Tests
on:
  pull_request:
    paths-ignore:
      - 'README.md'
  push:
    paths-ignore:
      - 'README.md'
  # For systems with an upstream API that could drift unexpectedly (like most SaaS systems, etc.),
  # we recommend testing at a regular interval not necessarily tied to code changes. This will 
  # ensure you are alerted to something breaking due to an API change, even if the code did not
  # change.
  # schedule:
  #   - cron: '0 13 * * *'
jobs:
  # ensure the code builds...
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: Set up Go
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version-file: 'go.mod'
        cache: true
      id: go

    - name: Get dependencies
      run: |
        go mod download

    - name: Build
      run: |
        go build -v .

  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: 'go.mod'
          cache: true
      - run: go generate ./...
      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'go generate ./...' command and commit."; exit 1)

  # run acceptance tests in a matrix with Terraform core versions
  test:
    name: Matrix Test
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '0.15.*'
          - '1.0.*'
          - '1.1.*'
          - '1.2.*'
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: Set up Go
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version-file: 'go.mod'
        cache: true
      id: go

    - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
      with:
        terraform_version: ${{ matrix.terraform }}
        terraform_wrapper: false

    - name: Get dependencies
      run: |
        go mod download
    
    - name: Checkout the ghostwriter application
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        repository: GhostManager/Ghostwriter
        path: ghostwriter
    
    - name: Install the ghostwriter application
      working-directory: ./ghostwriter
      run: |
        chmod +x ghostwriter-cli-linux
        ./ghostwriter-cli-linux install --dev
        sleep 10
    
    - name: Optain the ghostwriter API key
      id: gw_health
      working-directory: ./ghostwriter
      run: |
        export GHOSTWRITER_USERNAME="admin"
        export GHOSTWRITER_PASSWORD=$(./ghostwriter-cli-linux config get ADMIN_PASSWORD | grep ADMIN_PASSWORD | awk '{print $2}')
        echo GHOSTWRITER_API_KEY=$(curl -X POST -H "Content-Type: application/json" -d '{"query": "mutation Login { login(password: \"'$GHOSTWRITER_PASSWORD'\", username: \"'$GHOSTWRITER_USERNAME'\") { token expires } }"}' http://localhost:8080/v1/graphql | jq -r .data.login.token) >> $GITHUB_ENV
    
    - name: Create some test data
      working-directory: ./ghostwriter
      run: |
        export GHOSTWRITER_CLIENT_ID=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $GHOSTWRITER_API_KEY" -d '{"query": "mutation InsertClient { insert_client(objects: {name: \"TestClient\", shortName: \"TC\", codename: \"tc\", note: \"Test Note\", address: \"Test Address\"}) { returning { id } } }"}' http://localhost:8080/v1/graphql | jq -r .data.insert_client.returning[0].id)
        curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $GHOSTWRITER_API_KEY" -d '{"query": "mutation InsertProject { insert_project(objects: {clientId: \"'$GHOSTWRITER_CLIENT_ID'\", codename: \"TestProject\", endDate: \"2025-01-01\", startDate: \"2024-01-01\", note: \"Test Note\", slackChannel: \"#test\", projectTypeId: \"1\"}) { returning { id } } }"}' http://localhost:8080/v1/graphql
        curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $GHOSTWRITER_API_KEY" -d '{"query": "mutation InsertDomain { insert_domain(objects: {burned_explanation: \"\", autoRenew: false, name: \"example.com\", registrar: \"Route 53\", creation: \"2024-01-01\", expiration: \"2025-01-01\", note: \"Test Note\", vtPermalink: \"\"}) { returning { id, burned_explanation, autoRenew, name, registrar, creation, expiration, note, vtPermalink} } }"}' http://localhost:8080/v1/graphql
        curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $GHOSTWRITER_API_KEY" -d '{"query": "mutation InsertServer { insert_staticServer(objects: {name: \"TestServer\", serverProviderId: 1, serverStatusId: 1, ipAddress: \"192.168.0.1\", note: \"Test Note\"}) { returning { id, name, serverProviderId, serverStatusId, ipAddress, note } } }"}' http://localhost:8080/v1/graphql
        
    - name: TF acceptance tests
      timeout-minutes: 10
      env:
        TF_ACC: "1"

        # Set whatever additional acceptance test env vars here. You can
        # optionally use data from your repository secrets using the
        # following syntax:
        # SOME_VAR: ${{ secrets.SOME_VAR }}

      run: |
        go test -v -cover ./internal/provider/
    
    - name: Gather ghostwriter logs
      if: always()
      working-directory: ./ghostwriter
      run: |
        ./ghostwriter-cli-linux logs graphql --dev